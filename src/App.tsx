import React, { useEffect, useState } from "react";
import config from "./config";
import { initializeApp } from "firebase/app";
import { getDatabase, ref, set, onValue } from "firebase/database";
import { generateUUID } from "./utils/generateValues";
import "./styles/App.css";
import MenuCard from "./components_ui/MenuCard";
import references from "./utils/databaseReferences";
import { GameInfo, LoginInfo, PlayerInfo } from "./types";
import GameCanvas from "./components_ui/GameCanvas";
import { message } from "antd";

function App() {
	const [messageApi, contextHolder] = message.useMessage();
	const [userId, setUserId] = useState<string>(generateUUID());
	const [ingame, setIngame] = useState<boolean>(false);
	const [gameInfo, setGameInfo] = useState<GameInfo | undefined>(undefined); //all game info is contained in here
	const [selfPlayerInfo, setSelfPlayerInfo] = useState<PlayerInfo>({
		username: "", //will be entered in form
		position: { x: 0, y: 0 }, //default position
		color: "", //will be generated by form
	});

	useEffect(() => {
		onValue(ref(db, references.players(1)), (snapshot) => {
			const data = snapshot.val();
			console.log(data);
			setGameInfo(data);
		});
	}, []);

	const app = initializeApp(config);
	const db = getDatabase();

	const showErrorMessage = () => {
		messageApi.open({
			type: "error",
			content: "There was an unexpected error",
		});
	};

	const manageEnterLobby = (values: LoginInfo) => {
		console.log(values);
		const playerInfo: PlayerInfo = {
			username: values.username,
			position: { x: 0, y: 0 },
			color: values.color,
		};
		setSelfPlayerInfo(playerInfo);
		set(ref(db, references.player(1, userId)), playerInfo)
			.then(() => {
				setIngame(true);
			})
			.catch(() => {
				showErrorMessage();
			}); //TODO: Handle multiple rooms.
	};
	const moveSelf = (x: number, y: number) => {
		selfPlayerInfo.position.x += x;
		selfPlayerInfo.position.y += y;
		set(ref(db, references.player(1, userId)), selfPlayerInfo).catch(() => {
			showErrorMessage();
		});
	};
	const move = () => {
		moveSelf(1, 1);
	};

	return (
		<div className="App">
			<header className="App-header">
				{!ingame && <MenuCard userId={userId} onFinish={manageEnterLobby} />}
				{ingame && gameInfo && <GameCanvas gameInfo={gameInfo} move={move} />}
			</header>
		</div>
	);
}

export default App;
